# -*- coding: utf-8 -*-
# OPENCLASSROOMS-COURSES-EXPLORER 
# Copyright (c) 2021, Tristan Vanrullen - all rights reserved.
# Note there is a licence for the code and another for the contents generated by the application
# see licence.txt for more details 


import OCCoursesConfig as occ
from OCCoursesConfig import widgets, display, HTML, IFrame, OCGraphsIconsLocal
from OCCoursesDatasets import save_OC_datasets
import OCCoursesDatasets as ocd
# from OCCoursesScrapping import OC_browser_get_connexion_info, \
#    OC_browser_get_connexion_status,\
#    OC_browser_connect,\
#    OC_browser_disconnect,\
#    scrap_OC_Topics, scrap_OC_Paths,scrap_OC_PathsSkills,scrap_OC_Projects,scrap_OC_ProjectsCoursesLinks,\
#    scrap_OC_Courses,scrap_OC_CoursesDetails,scrap_OC_CoursesLinks,scrap_OC_MyCourses,scrap_OC_RepairCoursesLinks

import OCCoursesGraphs as ocg
import OCCoursesPlots as ocp
import OCCoursesAgenda as oca

# ------------------------------------------------- Header
# -------------- Console Cell
main_console = widgets.Textarea(value="Hello Explorer!",
                                description='',
                                disabled=False,
                                layout=widgets.Layout(width='60%', height='90px'))


def clear_console_log():
    global main_console
    main_console.value = ""


# fin fonction

def console_log(text="", add_newline_before_text=True):
    global main_console
    value = main_console.value
    if add_newline_before_text:
        value = value + "\n"
    main_console.value = value + text


# fin fonction

# -------------- Info box sur le dataset de travail
status_output = widgets.Output(
    layout={'border': '1px solid #CCC', 'width': '99%', 'height': '70px', 'overflow': 'auto'})
status_progress = widgets.IntProgress(description="loading", value=25, min=0, max=100,
                                      layout={'border': '1px solid #CCC', 'width': '99%', 'height': '30px'})


def clear_status():
    global status_output
    status_output.clear_output()


# fin fonction

def set_status(txt, clear=False):
    global status_output
    if clear:
        status_output.clear_output()
    with status_output:
        print(txt)


# fin fonction

def init_progress(description="", value=0, min=0, max=100):
    global status_progress
    status_progress.value = value
    status_progress.min = min
    status_progress.max = max
    status_progress.description = description


def clear_progress():
    global status_progress
    status_progress.value = 0
    status_progress.min = 0
    status_progress.max = 100
    status_progress.description = ""


# fin fonction

def set_progress(value, description=""):
    global status_progress
    status_progress.value = value
    status_progress.description = description


# fin fonction

# -------------- Header final
header_box = widgets.HBox([main_console,
                           widgets.VBox([status_output,
                                         status_progress
                                         ], layout={'border': '1px solid #CCC', 'width': '40%', 'height': '90px'})
                           ])


# ------------------------------------------------- Menu principal (tabs)
# --- Data tab elements


def display_connexion_info():
    # from OCCoursesScrapping import OC_connexion_info
    global data_OC_connexion_info

    occi = OC_browser_get_connexion_info()
    if (type(occi) == type(None)):
        data_OC_connexion_info.value = "&nbsp;<i>You are not logged in."
    else:
        t = "&nbsp;Hello&nbsp;"
        t += occi["user"]["displayableName"]
        if (occi["user"]["profilePicture"] != ""):
            t += '&nbsp;<img src="' + occi["user"]["profilePicture"] + '" height="36" valign="bottom"/>'
        data_OC_connexion_info.value = t


# fin fonction

def OC_browser_connect_action(b):
    global data_OC_login, data_OC_password, data_OC_connect_button, data_OC_disconnect_button
    if (OC_browser_get_connexion_status() == True):  # already connected
        console_log("You are already connected! Why would you connect twice?")
        return
    if (data_OC_login.value == "") or (data_OC_password.value == ""):  # blanks may not work very well to login
        console_log("Login or Password is empty")
        return

    OC_browser_connect(data_OC_login.value, data_OC_password.value)

    if (OC_browser_get_connexion_status() == True):  # now being connected is what we want
        console_log("Login worked pretty fine")
        display_data_section()
        display_connexion_info()
        data_OC_connect_button.disabled = True
        data_OC_disconnect_button.disabled = False
    else:
        console_log("Login seems to have failed")


# fin fonction

def OC_browser_disconnect_action(b):
    global data_OC_connect_button, data_OC_disconnect_button
    if (OC_browser_get_connexion_status() == False):  # already disconnected
        console_log("You are already disconnected! Why would you disconnect twice?")
        return
    OC_browser_disconnect()
    if (OC_browser_get_connexion_status() == False):  # now being disconnected is what we want
        console_log("Disconnected you are!")
        display_data_section()
        display_connexion_info()
        data_OC_connect_button.disabled = False
        data_OC_disconnect_button.disabled = True


# fin fonction


# login input field
data_OC_login = widgets.Text(
    description="Login",
    value=""
)
data_OC_login.layout = widgets.Layout(width='250px', height='30px')

# password input field
data_OC_password = widgets.Password(
    description="Password",
    value=""
)
data_OC_password.layout = widgets.Layout(width='200px', height='30px')

data_OC_connect_button = widgets.Button(description="Connect OpenClassrooms", icon="sign-in-alt", disabled=False)
data_OC_connect_button.layout = widgets.Layout(width='200px', height='30px')
data_OC_connect_button.on_click(OC_browser_connect_action)

data_OC_disconnect_button = widgets.Button(description="Disconnect", icon="sign-out-alt", disabled=True)
data_OC_disconnect_button.layout = widgets.Layout(width='100px', height='30px')
data_OC_disconnect_button.on_click(OC_browser_disconnect_action)

data_OC_connexion_info = widgets.HTML("&nbsp;")
data_OC_connexion_info.layout = widgets.Layout(width='350px', height='30px')

data_OC_items = [
    data_OC_login,
    data_OC_password,
    data_OC_connect_button,
    data_OC_disconnect_button,
    data_OC_connexion_info
]

data_OC_login_items = widgets.HBox(data_OC_items)
data_OC_login_items.layout = widgets.Layout(width='99%', height='50px')

data_OC_out = widgets.Output()
data_OC_out.layout = widgets.Layout(width='99%', height='580px')
data_OC_box = widgets.VBox([data_OC_login_items, data_OC_out])

# --- Paths tab elements

paths_height_slider = widgets.IntSlider(
    value=560,
    min=200,
    max=1200,
    step=5,
    description='Height',
    disabled=False,
    continuous_update=False,
    orientation='vertical',
    readout=True,
    readout_format='d'
)
paths_height_slider.layout = widgets.Layout(width="35px", height='80%')

paths_topic_selector = widgets.Dropdown(
    options=[("-", 0)],
    value=0,
    description="Topic"
)
paths_topic_selector.layout = widgets.Layout(width="280px", height='24px')

paths_language_selector = widgets.Dropdown(
    options=["-"],
    value="-",
    description="Lang"
)
paths_language_selector.layout = widgets.Layout(width="140px", height='24px')

paths_level_selector = widgets.Dropdown(
    options=["-"],
    value="-",
    description="Level"
)
paths_level_selector.layout = widgets.Layout(height='24px')

paths_duration_selector = widgets.Dropdown(
    options=["-"],
    value="-",
    description="Months"
)
paths_duration_selector.layout = widgets.Layout(height='24px')

paths_link_area = widgets.HTML()
paths_link_area.layout = widgets.Layout(width="200", height='24px')


def do_nothing(w):
    pass


# end function

def paths_filter_change(w):
    global paths_height_slider
    if (w["owner"] == paths_height_slider):
        # current properties avoiding lateral scrollbar to appear
        # bounding box : by default , we have : header (1 menu items rows) height = 30px, inner box (output area) = 580px , menu_tab = tab margins + header + box = 680
        # inner box : projects out = 580px, containing the graph (560 px) 
        # so : when the graph height is H, output height = H+20, menu tab height = H+120
        paths_out.layout = widgets.Layout(width='99%', height=str(paths_height_slider.value + 70) + 'px')
    #         menu_tab.layout=widgets.Layout(width='100%', height=str(paths_height_slider.value+180)+'px')
    display_path_section()


# end function

def populate_paths_selectors():
    global paths_height_slider, paths_topic_selector, paths_language_selector, paths_level_selector, paths_duration_selector

    df = ocd.OC_Topics[["topic_name", "topic_id"]][
        ocd.OC_Topics["topic_id"].isin(ocd.OC_Paths.topic_id.unique())].sort_values(by=["topic_name"])
    opt = [("-", 0)]
    for i, r in df.iterrows():
        opt.append((r["topic_name"], r["topic_id"]))
    paths_topic_selector.options = opt
    paths_topic_selector.observe(paths_filter_change, names="value")

    paths_language_selector.options = ["-"] + list(ocd.OC_Paths["path_language"].unique())
    paths_language_selector.observe(paths_filter_change, names="value")

    paths_level_selector.options = ["-"] + list(ocd.OC_Paths["path_level"].sort_values().unique())
    paths_level_selector.observe(paths_filter_change, names="value")

    paths_duration_selector.options = ["-"] + list(ocd.OC_Paths["path_duration_months"].sort_values().unique())
    paths_duration_selector.observe(paths_filter_change, names="value")

    paths_height_slider.observe(paths_filter_change, names="value")


# end function

paths_items = widgets.HBox(
    [paths_topic_selector, paths_language_selector, paths_level_selector, paths_duration_selector, paths_link_area])
paths_items.layout = widgets.Layout(width='99%', height='30px')

paths_out = widgets.Output()  # in the current tab, output is hence limited to minimalist information.
paths_out.layout = widgets.Layout(width='99%', height=str(paths_height_slider.value + 70) + 'px')
paths_box = widgets.VBox([paths_items, widgets.HBox([paths_height_slider, paths_out])])

# --- Projects tab elements

projects_height_slider = widgets.IntSlider(
    value=500,
    min=200,
    max=1200,
    step=5,
    description='Height',
    disabled=False,
    continuous_update=False,
    orientation='vertical',
    readout=True,
    readout_format='d'
)
projects_height_slider.layout = widgets.Layout(width="35px", height='80%')

projects_topic_selector = widgets.Dropdown(
    options=[("-", 0)],
    value=0,
    description="Topic"
)
projects_topic_selector.layout = widgets.Layout(width="250px", height='24px')

projects_path_selector = widgets.Dropdown(
    options=[("-", 0)],
    value=0,
    description="Path"
)
projects_path_selector.layout = widgets.Layout(width="250px", height='24px')

projects_mountainshape_selector = widgets.Dropdown(
    options=[("Mountain", 0), ("OC Wheel", 1), ("StaiZway to OC", 2), ("Shad'OC Ladder", 3)],
    value=0,
    tooltip='The shape of the learning structure, to climb the path towards success',
    description="Shape"
)
projects_mountainshape_selector.layout = widgets.Layout(width="200px", height='24px')

projects_max_depth_slider = widgets.IntSlider(
    value=1,
    min=0,
    max=20,
    step=1,
    description='Max Depth',
    tooltip='Do not explore links between courses too deeply : limit exploration to Max Depth !',
    disabled=False,
    continuous_update=False,
    orientation='horizontal',
    readout=True,
    readout_format='d'
)
projects_max_depth_slider.layout = widgets.Layout(width="250px", height='24px')

projects_ireadmycoursesonce_check = widgets.ToggleButton(
    value=False,
    description='Persistent learning',
    disabled=False,
    button_style='',  # 'success', 'info', 'warning', 'danger' or ''
    tooltip='I learn my courses once, so do not draw links towards courses already visited! (As to say trust the guide and do not overlook things)',
    icon='book'  # (FontAwesome names without the `fa-` prefix)
)
projects_ireadmycoursesonce_check.layout = widgets.Layout(width="160px", height='24px')

projects_hidereferences_check = widgets.ToggleButton(
    value=False,
    description='Focused learning',
    disabled=False,
    button_style='',  # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Just focus on mandatory courses requirements, and ignore informative references.',
    icon='clock'  # (FontAwesome names without the `fa-` prefix)
)
projects_hidereferences_check.layout = widgets.Layout(width="160px", height='24px')

projects_relations_max_distance_slider = widgets.IntSlider(
    value=1,
    min=0,
    max=20,
    step=1,
    description='Max Lookout',
    tooltip='Long distance relations between courses may be disturbing: Max Lookout defines the max lookout distance.',
    disabled=False,
    continuous_update=False,
    orientation='horizontal',
    readout=True,
    readout_format='d'
)
projects_relations_max_distance_slider.layout = widgets.Layout(width="250px", height='24px')

projects_pseudonodes_check = widgets.ToggleButton(
    value=False,
    description='Lookout links',
    disabled=False,
    button_style='',  # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Draw mini paths to indicate long distance references over the Max Lookout distance',
    icon='share-alt'  # (FontAwesome names without the `fa-` prefix)
)
projects_pseudonodes_check.layout = widgets.Layout(width="160px", height='24px')

projects_myway_check = widgets.ToggleButton(
    value=True,
    description='My Way',
    disabled=False,
    button_style='',  # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Expose My Way (courses and projects)',
    icon='user-graduate'  # (FontAwesome names without the `fa-` prefix)
)
projects_myway_check.layout = widgets.Layout(width="105px", height='24px')

projects_link_area = widgets.HTML()
projects_link_area.layout = widgets.Layout(width="200", height='24px')


def projects_filter_change(w):
    global projects_height_slider, projects_topic_selector, projects_path_selector, projects_mountainshape_selector, projects_max_depth_slider, \
        projects_ireadmycoursesonce_check, projects_hidereferences_check, projects_relations_max_distance_slider, projects_pseudonodes_check, \
        projects_myway_check, projects_link_area, \
        projects_out, menu_tab

    topic_id = projects_topic_selector.value
    path_id = projects_path_selector.value
    #     if (topic_id == 0):
    #         return
    if (w["owner"] == projects_height_slider):
        # current properties avoiding lateral scrollbar to appear
        # bounding box : by default , we have : header (2 menu items rows) height = 60px, inner box (output area) = 570px , menu_tab = header + box = 680
        # inner box : projects out = 570px, containing the graph (500 px) 
        # so : when the graph height is H, output height = H+70, menu tab height = H+180
        projects_out.layout = widgets.Layout(width='98%', height=str(projects_height_slider.value + 70) + 'px')
    #         menu_tab.layout=widgets.Layout(width='100%', height=str(projects_height_slider.value+180)+'px')

    if (w["owner"] == projects_topic_selector):
        df = ocd.OC_Paths[["path_title", "path_language", "path_id"]][
            ocd.OC_Paths["topic_id"].isin([topic_id])].sort_values(by=["path_language", "path_title"])
        opt = [("-", 0)]
        for i, r in df.iterrows():
            opt.append((r["path_language"] + " : " + r["path_title"], r["path_id"]))
        projects_path_selector.options = opt
        projects_path_selector.value = 0

    #     if (path_id == 0):
    #         #projects_path_selector.value = 0
    #         return

    display_projects_section()


# end function

def populate_projects_selectors():
    global projects_height_slider, projects_topic_selector, projects_path_selector, projects_mountainshape_selector, projects_max_depth_slider, \
        projects_ireadmycoursesonce_check, projects_hidereferences_check, projects_relations_max_distance_slider, \
        projects_pseudonodes_check, projects_myway_check, projects_link_area \
 \
    selectors = [projects_height_slider, projects_topic_selector, projects_path_selector,
                 projects_mountainshape_selector, projects_max_depth_slider, \
                 projects_ireadmycoursesonce_check, projects_hidereferences_check,
                 projects_relations_max_distance_slider, projects_myway_check, \
                 projects_pseudonodes_check \
                 ]

    df = ocd.OC_Topics[["topic_name", "topic_id"]][
        ocd.OC_Topics["topic_id"].isin(ocd.OC_Paths.topic_id.unique())].sort_values(by=["topic_name"])
    opt = [("-", 0)]
    for i, r in df.iterrows():
        opt.append((r["topic_name"], r["topic_id"]))
    projects_topic_selector.options = opt
    projects_topic_selector.value = 0

    for ps in selectors:
        ps.observe(projects_filter_change, names="value")


#     projects_pseudonodes_check.observe(projects_filter_change,names="value")
# end function

projects_items_r1 = widgets.HBox([projects_myway_check, projects_topic_selector, projects_path_selector, \
                                  projects_mountainshape_selector, projects_max_depth_slider])
projects_items_r1.layout = widgets.Layout(width='99%', height='30px')
projects_items_r2 = widgets.HBox(
    [projects_ireadmycoursesonce_check, projects_hidereferences_check, projects_relations_max_distance_slider, \
     projects_pseudonodes_check, projects_link_area])
projects_items_r2.layout = widgets.Layout(width='99%', height='30px')

# due to limitations in Jupyter Notebooks and Voila, it is impossible to draw PyVis Network in a ipywidgets Output.
# this works perfectly in Jupyter Lab, but all attemps to make it work in NB and Voila failed, with the vis javascript blocked 
# The only way to have a kind of common behaviour is to output PyVis Networks in a notebook cell, with "notebook=True" parameter+ g.show()
projects_out = widgets.Output()
projects_out.layout = widgets.Layout(width='98%', height=str(projects_height_slider.value + 70) + 'px')
projects_box = widgets.VBox(
    [projects_items_r1, projects_items_r2, widgets.HBox([projects_height_slider, projects_out])])

# --- Courses tab elements


courses_height_slider = widgets.IntSlider(
    value=500,
    min=200,
    max=1200,
    step=5,
    description='Height',
    disabled=False,
    continuous_update=False,
    orientation='vertical',
    readout=True,
    readout_format='d'
)
courses_height_slider.layout = widgets.Layout(width="35px", height='80%')

# select courses having a given topic
courses_topic_selector = widgets.Dropdown(
    options=[("-", 0)],
    value=0,
    description="Courses Topic"
)
courses_topic_selector.layout = widgets.Layout(width="350px", height='24px')

# select courses having a given language
courses_language_selector = widgets.Dropdown(
    options=["-"],
    value="-",
    description="Courses Lang"
)
courses_language_selector.layout = widgets.Layout(width="180px", height='24px')

# select paths having a given topic
courses_path_topic_selector = widgets.Dropdown(
    options=[("-", 0)],
    value=0,
    description="Paths Topic"
)
courses_path_topic_selector.layout = widgets.Layout(width="350px", height='24px')

# select paths having a given language
courses_path_language_selector = widgets.Dropdown(
    options=["-"],
    value="-",
    description="Paths Lang"
)
courses_path_language_selector.layout = widgets.Layout(width="180px", height='24px')

courses_path_selector = widgets.Dropdown(
    options=[("-", 0)],
    value=0,
    description="Path"
)
courses_path_selector.layout = widgets.Layout(width="250px", height='24px')

courses_max_depth_slider = widgets.IntSlider(
    value=1,
    min=0,
    max=20,
    step=1,
    description='Max Depth',
    tooltip='Do not explore links between courses too deeply : limit exploration to Max Depth !',
    disabled=False,
    continuous_update=False,
    orientation='horizontal',
    readout=True,
    readout_format='d'
)
courses_max_depth_slider.layout = widgets.Layout(width="250px", height='24px')

courses_hidereferences_check = widgets.ToggleButton(
    value=True,
    description='Focused learning',
    disabled=False,
    button_style='',  # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Just focus on mandatory courses requirements, and ignore informative references.',
    icon='clock'  # (FontAwesome names without the `fa-` prefix)
)
courses_hidereferences_check.layout = widgets.Layout(width="140px", height='24px')

courses_algo_check = widgets.ToggleButton(
    value=False,
    description='',
    disabled=False,
    button_style='',  # 'success', 'info', 'warning', 'danger' or ''
    tooltip='use ATLAS or BARNESHUT dynamic layout algorithm',
    icon='globe'  # (FontAwesome names without the `fa-` prefix)
)
courses_algo_check.layout = widgets.Layout(width="30px", height='24px')

courses_myway_check = widgets.ToggleButton(
    value=True,
    description='My Way',
    disabled=False,
    button_style='',  # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Expose My Way (courses and path)',
    icon='user-graduate'  # (FontAwesome names without the `fa-` prefix)
)
courses_myway_check.layout = widgets.Layout(width="105px", height='24px')

courses_connexpaths_check = widgets.ToggleButton(
    value=False,
    description='Connex paths',
    disabled=False,
    button_style='',  # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Show only courses related to the selected paths (courses belonging to paths connex graph)',
    icon='project-diagram'  # (FontAwesome names without the `fa-` prefix)
)
courses_connexpaths_check.layout = widgets.Layout(width="105px", height='24px')

courses_palette_selector = widgets.Dropdown(
    options=["Topic", "Dependency", "Hybrid"],
    value="Topic",
    description="Palette",
    tooltip='Choose between Topic dependency color palettes.'
)
courses_palette_selector.layout = widgets.Layout(width="200px", height='24px')


def courses_filter_change(w):
    global courses_height_slider, courses_topic_selector, courses_language_selector, \
        courses_path_topic_selector, courses_path_language_selector, \
        courses_path_selector, courses_hidereferences_check, courses_max_depth_slider, \
        courses_algo_check, courses_myway_check, courses_palette_selector, courses_connexpaths_check, \
        courses_out, menu_tab

    path_topic_id = courses_path_topic_selector.value
    path_language = courses_path_language_selector.value
    path_id = courses_path_selector.value

    if (w["owner"] == courses_path_topic_selector) or (w["owner"] == courses_path_language_selector):
        opt = [("-", 0)]
        if (path_topic_id == 0):
            df = ocd.OC_Topics[["topic_name", "topic_id"]][
                ocd.OC_Topics["topic_id"].isin(ocd.OC_Paths.topic_id.unique())]
            df = ocd.OC_Paths.merge(df, on='topic_id', how='left').sort_values(
                by=["topic_name", "path_language", "path_title"])
        else:
            df = ocd.OC_Paths[ocd.OC_Paths["topic_id"].isin([path_topic_id])]
            df = df.merge(ocd.OC_Topics[["topic_name", "topic_id"]], on='topic_id', how='left').sort_values(
                by=["topic_name", "path_language", "path_title"])
        if (path_language != '-'):
            df = df[df["path_language"].isin([path_language])]
        for i, r in df.iterrows():
            opt.append((r["topic_name"][:3] + "-" + r["path_language"] + " : " + r["path_title"], r["path_id"]))
        courses_path_selector.options = opt
        courses_path_selector.value = 0

    if (w["owner"] == courses_height_slider):
        courses_out.layout = widgets.Layout(width='98%', height=str(courses_height_slider.value + 70) + 'px')

    display_courses_section()


# end function

def populate_courses_selectors():
    global courses_height_slider, courses_topic_selector, courses_language_selector, \
        courses_path_topic_selector, courses_path_language_selector, \
        courses_path_selector, courses_max_depth_slider, courses_hidereferences_check, \
        courses_algo_check, courses_myway_check, courses_palette_selector, courses_connexpaths_check

    selectors = [courses_height_slider, courses_topic_selector, courses_language_selector, \
                 courses_path_topic_selector, courses_path_language_selector, \
                 courses_path_selector, courses_max_depth_slider, courses_hidereferences_check, \
                 courses_algo_check, courses_myway_check, courses_palette_selector, courses_connexpaths_check]

    df = ocd.OC_Topics[["topic_name", "topic_id"]].sort_values(
        by=["topic_name"])  # [ocd.OC_Topics["topic_id"].isin(ocd.OC_Paths.topic_id.unique())]
    opt = [("-", 0)]
    for i, r in df.iterrows():
        opt.append((r["topic_name"], r["topic_id"]))
    courses_topic_selector.options = opt
    courses_topic_selector.value = 0

    df = ocd.OC_Topics[["topic_name", "topic_id"]][ocd.OC_Topics["topic_id"].isin(ocd.OC_Paths.topic_id.unique())]
    opt = [("-", 0)]
    for i, r in df.iterrows():
        opt.append((r["topic_name"], r["topic_id"]))
    courses_path_topic_selector.options = opt
    courses_path_topic_selector.value = 0

    courses_language_selector.options = ["-"] + list(ocd.OC_Courses["course_language"].unique())
    courses_path_language_selector.options = ["-"] + list(ocd.OC_Paths["path_language"].unique())

    df = ocd.OC_Topics[["topic_name", "topic_id"]][ocd.OC_Topics["topic_id"].isin(ocd.OC_Paths.topic_id.unique())]
    df = ocd.OC_Paths.merge(df, on='topic_id', how='left').sort_values(by=["topic_name", "path_language", "path_title"])
    opt = [("-", 0)]
    for i, r in df.iterrows():
        opt.append((r["topic_name"][:3] + "-" + r["path_language"] + " : " + r["path_title"], r["path_id"]))
    courses_path_selector.options = opt
    courses_path_selector.value = 0

    for ps in selectors:
        ps.observe(courses_filter_change, names="value")


# end function

courses_items_r1 = widgets.HBox(
    [courses_algo_check, courses_myway_check, courses_connexpaths_check, courses_palette_selector,
     courses_topic_selector, courses_language_selector])
courses_items_r1.layout = widgets.Layout(width='99%', height='30px')
courses_items_r2 = widgets.HBox(
    [courses_hidereferences_check, courses_path_topic_selector, courses_path_language_selector, courses_path_selector, \
     courses_max_depth_slider])
courses_items_r2.layout = widgets.Layout(width='99%', height='30px')

courses_items = []
courses_out = widgets.Output()
courses_out.layout = widgets.Layout(width='98%', height=str(courses_height_slider.value + 70) + 'px')
courses_box = widgets.VBox([courses_items_r1, courses_items_r2, widgets.HBox([courses_height_slider, courses_out])])

# --- Schedule tab elements
schedule_path_selector = widgets.Dropdown(
    options=[("-", 0)],
    value=0,
    description="Path"
)
schedule_path_selector.layout = widgets.Layout(width="320px", height='24px')

schedule_requires_max_depth_slider = widgets.IntSlider(
    value=1,
    min=0,
    max=20,
    step=1,
    description='Required Max Depth',
    tooltip='Do not explore REQUIRED links between courses too deeply : limit exploration to Max Depth !',
    disabled=False,
    continuous_update=False,
    orientation='horizontal',
    readout=True,
    readout_format='d'
)
schedule_requires_max_depth_slider.layout = widgets.Layout(width="300px", height='24px')

schedule_references_max_depth_slider = widgets.IntSlider(
    value=0,
    min=0,
    max=20,
    step=1,
    description='References Max Depth',
    tooltip='Do not explore REFERENCES links between courses too deeply : limit exploration to Max Depth !',
    disabled=False,
    continuous_update=False,
    orientation='horizontal',
    readout=True,
    readout_format='d'
)
schedule_references_max_depth_slider.layout = widgets.Layout(width="300px", height='24px')

schedule_myway_check = widgets.ToggleButton(
    value=True,
    description='My Way',
    disabled=False,
    button_style='',  # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Expose My Way (courses and projects)',
    icon='user-graduate'  # (FontAwesome names without the `fa-` prefix)
)
schedule_myway_check.layout = widgets.Layout(width="105px", height='24px')

schedule_details_check = widgets.ToggleButton(
    value=False,
    description='Details',
    disabled=False,
    button_style='',  # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Show projects and courses details, chapters and skills',
    icon='asterisk'  # (FontAwesome names without the `fa-` prefix)
)
schedule_details_check.layout = widgets.Layout(width="105px", height='24px')


def schedule_filter_change(w):
    display_schedule_section()


# end function

def populate_schedule_selectors():
    global schedule_path_selector, schedule_requires_max_depth_slider, schedule_references_max_depth_slider, schedule_myway_check, schedule_details_check

    selectors = [schedule_path_selector, schedule_requires_max_depth_slider, schedule_references_max_depth_slider,
                 schedule_myway_check, schedule_details_check]

    df = ocd.OC_Topics[["topic_name", "topic_id"]][ocd.OC_Topics["topic_id"].isin(ocd.OC_Paths.topic_id.unique())]
    df = ocd.OC_Paths.merge(df, on='topic_id', how='left').sort_values(by=["topic_name", "path_language", "path_title"])
    opt = [("-", 0)]
    for i, r in df.iterrows():
        opt.append((r["topic_name"][:3] + "-" + r["path_language"] + " : " + r["path_title"], r["path_id"]))
    schedule_path_selector.options = opt
    schedule_path_selector.value = 0

    for ps in selectors:
        ps.observe(schedule_filter_change, names="value")


# end function

schedule_items_r1 = widgets.HBox(
    [schedule_myway_check, schedule_details_check, schedule_path_selector, schedule_requires_max_depth_slider,
     schedule_references_max_depth_slider])
schedule_items_r1.layout = widgets.Layout(width='99%', height='30px')

schedule_out = widgets.Output()
schedule_out.layout = widgets.Layout(width='98%', height='580px')
schedule_box = widgets.VBox([schedule_items_r1, schedule_out])


# --- Information tab elements

def information_show_minidoc(w):
    global information_out, information_minidoc_togglebutton, information_readme_togglebutton, information_licence_togglebutton
    if (w["owner"] == information_minidoc_togglebutton and w["new"] == True):
        information_readme_togglebutton.value = False
        information_licence_togglebutton.value = False
        information_out.clear_output()
        with information_out:
            display(HTML(filename="doc/minidoc.html"))
    else:
        information_show_logo(w)


# end function

def information_show_readme(w):
    global information_out, information_minidoc_togglebutton, information_readme_togglebutton, information_licence_togglebutton
    if (w["owner"] == information_readme_togglebutton and w["new"] == True):
        information_minidoc_togglebutton.value = False
        information_licence_togglebutton.value = False
        information_out.clear_output()
        with information_out:
            filename = "readme.txt"
            fin = open(filename, "rt", encoding="utf8")
            txt = fin.read()
            display(HTML("<pre>" + txt + "</pre>"))
    else:
        information_show_logo(w)
    # end function


def information_show_licence(w):
    global information_out, information_minidoc_togglebutton, information_readme_togglebutton, information_licence_togglebutton
    if (w["owner"] == information_licence_togglebutton and w["new"] == True):
        information_minidoc_togglebutton.value = False
        information_readme_togglebutton.value = False
        information_out.clear_output()
        with information_out:
            filename = "licence.txt"
            fin = open(filename, "rt", encoding="utf8")
            txt = fin.read()
            display(HTML("<pre>" + txt + "</pre>"))
    else:
        information_show_logo(w)
    # end function


def information_show_logo(w):
    global information_out, information_minidoc_togglebutton, information_readme_togglebutton, information_licence_togglebutton
    information_out.clear_output()
    with information_out:
        display(HTML(
            "<img width=\"500\"  height=\"500\" src=\"https://raw.githubusercontent.com/TristanV/OCCoursesExplorer/main/img/OCCoursesExplorer_logo.svg\">"))


information_minidoc_togglebutton = widgets.ToggleButton(
    value=False,
    description='Minidoc',
    disabled=False,
    button_style='success',  # 'success', 'info', 'warning', 'danger' or ''
    tooltip='What ... What not ...  Where ... Why ... Who ... What Really? ... How to ... How to ... How to ... How to ... How to ... How to ... OK!',
    icon='question-circle'  # (FontAwesome names without the `fa-` prefix)
)
information_minidoc_togglebutton.layout = widgets.Layout(width="160px", height='24px')
information_minidoc_togglebutton.observe(information_show_minidoc, names='value')

information_readme_togglebutton = widgets.ToggleButton(
    value=False,
    description='Readme',
    disabled=False,
    button_style='info',  # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Quick readme',
    icon='info-circle'  # (FontAwesome names without the `fa-` prefix)
)
information_readme_togglebutton.layout = widgets.Layout(width="160px", height='24px')
information_readme_togglebutton.observe(information_show_readme, names='value')

information_licence_togglebutton = widgets.ToggleButton(
    value=False,
    description='Licence',
    disabled=False,
    button_style='info',  # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Licence(s) for (1) this app and (2) the content generated by the app.',
    icon='exclamation-circle'  # (FontAwesome names without the `fa-` prefix)
)
information_licence_togglebutton.layout = widgets.Layout(width="160px", height='24px')
information_licence_togglebutton.observe(information_show_licence, names='value')

information_items = widgets.HBox(
    [information_minidoc_togglebutton, information_readme_togglebutton, information_licence_togglebutton])
information_items.layout = widgets.Layout(width='99%', height='30px')
information_out = widgets.Output()
information_out.layout = widgets.Layout(width='99%', height='580px')
information_box = widgets.VBox([information_items, information_out])

# --- -------------------------------------------------------
# --- Groupage des widgets enfants
menu_children = [data_OC_box, paths_box, projects_box, courses_box, schedule_box, information_box]

menu_tab = widgets.Tab(children=menu_children)
menu_tab.layout = widgets.Layout(width='100%')  # height='680px'

menu_tabs = ["Data", "Paths", "Projects", "Courses", "Schedule", "Information"]
for i, title in enumerate(menu_tabs):
    menu_tab.set_title(i, title)


# --- -------------------------------------------------------


# --------------------------------------- INFORMATION TAB    
# --- Information section GUI
# just a splash screen here : the display is activated when a button is pressed
def display_information_section():
    global information_minidoc_togglebutton, information_readme_togglebutton, information_licence_togglebutton
    if information_minidoc_togglebutton.value == False \
            and information_readme_togglebutton.value == False \
            and information_licence_togglebutton.value == False:
        information_show_logo(True)


# --------------------------------------- SCHEDULE TAB
# --- Schedule section GUI
def display_schedule_section():
    global schedule_out, schedule_path_selector, schedule_requires_max_depth_slider, schedule_references_max_depth_slider, schedule_myway_check, schedule_details_check

    filter_options = {
        "show_my_way": schedule_myway_check.value,
        "show_details": schedule_details_check.value,
        "path": schedule_path_selector.value,
        "required_max_depth": schedule_requires_max_depth_slider.value,
        "references_max_depth": schedule_references_max_depth_slider.value
    }

    schedule_out.clear_output()
    path_id = schedule_path_selector.value
    if (path_id == 0):
        with schedule_out:
            print("Please choose a path!")
            return False

    ht = oca.build_path_agenda_html(path_id=path_id, options=filter_options)

    if (type(ht) == type(None)):
        return False
    console_log("Drawing Schedule")
    with schedule_out:
        #         display(HTML(ht))
        href = occ.VizFolder + "custom_path_" + str(path_id) + "_schedule.html"
        f = open(href, 'w')
        f.write(ht)
        f.close()
        display(IFrame(href, height='570px', width='99%'))


# end function

# --------------------------------------- COURSES TAB    
# --- Courses section GUI
def display_courses_section():
    global courses_out, courses_palette_selector, \
        courses_height_slider, courses_topic_selector, courses_language_selector, \
        courses_path_topic_selector, courses_path_language_selector, \
        courses_path_selector, courses_myway_check, courses_hidereferences_check, courses_connexpaths_check

    filter_options = {
        "height": courses_height_slider.value,
        "topic": courses_topic_selector.value,
        "language": courses_language_selector.value,
        "path_topic": courses_path_topic_selector.value,
        "path_language": courses_path_language_selector.value,
        "path": courses_path_selector.value,
        "max_depth": courses_max_depth_slider.value,
        "hide_references": courses_hidereferences_check.value,
        "atlas_layout": courses_algo_check.value,
        "show_my_way": courses_myway_check.value,
        "palette": courses_palette_selector.value,
        "connex_paths": courses_connexpaths_check.value
    }

    courses_out.clear_output()

    g = ocg.build_courses_graph(topic_id=courses_topic_selector.value,
                                language=courses_language_selector.value,
                                path_topic_id=courses_path_topic_selector.value,
                                path_language=courses_path_language_selector.value,
                                path_id=courses_path_selector.value,
                                max_depth=courses_max_depth_slider.value,
                                atlas_layout=courses_algo_check.value,
                                show_my_way=courses_myway_check.value,
                                show_only_requirement_relations=courses_hidereferences_check.value,
                                height=str(courses_height_slider.value) + 'px', width='99%',
                                palette=courses_palette_selector.value,
                                bgcolor=occ.OCGraphsBackgroundColor, font_color=occ.OCGraphsTextColor,
                                directed=True, notebook=True, layout=False, show_titles=True,
                                show_buttons=False, filter_options=filter_options)

    if (type(g) == type(None)):
        return False
    console_log("Drawing Courses graph : " + str(g.num_nodes()) + " nodes / " + str(g.num_edges()) + " edges.")
    href = occ.VoilaVizFolder + "custom_oc_courses.html"
    with courses_out:
        iframe = g.write_html(href, notebook=True)
        ocg.rename_Network_container("courses_network", href)
        #         time.sleep(2)
        display(IFrame(href, height=str(courses_height_slider.value + 40) + 'px', width='99%'))


# end function

# --------------------------------------- PROJECTS TAB    
# --- Projects section GUI
def display_projects_section():
    global projects_out, \
        projects_height_slider, projects_path_selector, projects_topic_selector, projects_mountainshape_selector, projects_max_depth_slider, \
        projects_ireadmycoursesonce_check, projects_hidereferences_check, projects_relations_max_distance_slider, \
        projects_pseudonodes_check, projects_myway_check, projects_link_area

    filter_options = {
        "height": projects_height_slider.value,
        "topic": projects_topic_selector.value,
        "path": projects_path_selector.value,
        "max_depth": projects_max_depth_slider.value,
        "i_read_my_courses_once": projects_ireadmycoursesonce_check.value,
        "hide_references": projects_hidereferences_check.value,
        "relations_max_distance": projects_relations_max_distance_slider.value,
        "pseudo_nodes": projects_pseudonodes_check.value,
        "mountain_shape": projects_mountainshape_selector.value,
        "show_my_way": projects_myway_check.value
    }

    projects_out.clear_output()

    path_id = projects_path_selector.value
    if (path_id == 0):
        g = ocg.mini_graph("Select a Topic and a Path!", height=str(projects_height_slider.value) + 'px', width='99%',
                           bgcolor=occ.OCGraphsBackgroundColor, font_color=occ.OCGraphsTextColor,
                           directed=True, notebook=True, layout=False)
    else:
        path = next(ocd.OC_Paths[ocd.OC_Paths["path_id"].isin([path_id])].iterrows())[1]
        # path_title=path["path_title"].encode('utf-8').decode('latin')

        g = ocg.build_path_projects_courses_graph(path_id=path_id,
                                                  height=str(projects_height_slider.value) + 'px', width='99%',
                                                  bgcolor=occ.OCGraphsBackgroundColor, font_color=occ.OCGraphsTextColor,
                                                  directed=True, notebook=True, layout=False, show_titles=True,
                                                  show_buttons=False, filter_options=filter_options)
    href = occ.VoilaVizFolder + "custom_oc_projects.html"
    #         display(HTML("<div align='right'><a class='fas fa-link' href='./"+href+"'>&nbsp;Open in a new page</a></div>"))

    # path_id=188  #ingenieur_ia 
    # path_id=218 #createur entreprise
    # path_id=287 #digital marketer
    # path_id=319 #technicien info
    # path_id=164 # data scientist
    console_log("Drawing Projects graph : " + str(g.num_nodes()) + " nodes / " + str(g.num_edges()) + " edges.")
    with projects_out:
        iframe = g.write_html(href, notebook=True)
        ocg.rename_Network_container("projects_network", href)
        #         display(HTML(filename=href))
        display(IFrame(href, height=str(projects_height_slider.value + 40) + 'px', width='99%'))


#     paths_link_area.value="<div align='right'><a class='fas fa-link' target='_blank' href='./"+href+"'>&nbsp;Open in a new page</a></div>"
# end function

# --------------------------------------- PATHS TAB    
# --- Paths section GUI
def display_path_section():
    global paths_out, paths_height_slider, paths_topic_selector, paths_language_selector, paths_level_selector, paths_duration_selector, paths_link_area
    filter_options = {
        "height": paths_height_slider.value,
        "topic": paths_topic_selector.value,
        "language": paths_language_selector.value,
        "level": paths_level_selector.value,
        "duration": paths_duration_selector.value
    }

    paths_out.clear_output()

    with paths_out:
        href = occ.VoilaVizFolder + "custom_oc_paths.html"
        g = ocg.build_topics_and_paths_graph(height=str(paths_height_slider.value) + 'px', width='99%',
                                             bgcolor=occ.OCGraphsBackgroundColor,
                                             font_color=occ.OCGraphsTextColor,
                                             show_titles=False, directed=False,
                                             notebook=True, layout=False,
                                             show_buttons=False, filter_options=filter_options)
        #         display(HTML("<div align='right'><a class='fas fa-link' href='./"+href+"'>&nbsp;Open in a new page</a></div>"))

        console_log("Drawing Paths graph : " + str(g.num_nodes()) + " nodes / " + str(g.num_edges()) + " edges.")
        iframe = g.write_html(href, notebook=True)
        ocg.rename_Network_container("paths_network", href)
        #         display(HTML(filename=href))
        display(IFrame(href, height=str(paths_height_slider.value + 40) + 'px', width='99%'))
        # display(iframe)


#     paths_link_area.value="<div align='right'><a class='fas fa-link' target='_blank' href='./"+href+"'>&nbsp;Open in a new page</a></div>"
# end function


# --------------------------------------- DATA TAB
def save_OC_datasets_action(b):
    save_OC_datasets()
    display_data_section()


# fin fonction

# --- Pseudo table with widgets
# instead of placing TDs and THs into TRs, and TRs into TABLEs, 
# we put WCELL and WHCELL into WROW, and WROW into WTABLE

def wcell(content, width='200px', height='90%', color='#111', border='1px solid #CCC'):
    cell = widgets.HTML("<center><font color='" + color + "'>" + content + "</font></center>",
                        layout={'border': border, 'width': width, 'height': height})
    return cell


# fin fonction

def woutcell(width='200px', height='90%', border='1px solid #CCC'):
    cell = widgets.Output(layout={'border': border, 'width': width, 'height': height, 'overflow': 'hidden'})
    return cell


# fin fonction

def wimage(icon, ext, width, height):
    file = open(icon, "rb")
    image = file.read()
    return widgets.Image(
        value=image,
        format=ext,
        width=width,
        height=height,
    )


def wheadcell(content, width='200px', border='2px solid #CCC', icon=""):
    t = ""
    if icon != "":
        wimg = wimage(icon, 'png', 24, 24)
        cell = widgets.HBox([widgets.HTML("<div align='center'><b>" + t + content + "</b></div>", box_style='success',
                                          layout={'border': border, 'width': width, 'height': '90%'}), wimg])
    else:
        cell = widgets.HTML("<div align='center'><b>" + t + content + "</b></div>", box_style='success',
                            layout={'border': border, 'width': width, 'height': '90%'})
    return cell


# fin fonction

# customized empty cell
def wemptycell(width='200px'):
    cell = widgets.HTML("&nbsp;", layout={'width': width, 'height': '90%'})
    return cell


# fin fonction

# customized left border cell
def wleftbordercell(content, width='200px', borderleft='1px solid #CCC'):
    cell = widgets.HTML(
        "<div align='center' style='border-left:" + borderleft + ";'><center>" + content + "</center></div>",
        layout={'width': width, 'height': '90%'})
    return cell


# fin fonction

def wrow(wcells, height='35px'):
    cell = widgets.HBox(wcells, layout={'height': height})
    return cell


# fin fonction

def wseparatorrow(nb_cells, height='10px'):
    return wrow([wemptycell(width='5px') for i in range(0, nb_cells)], height=height)


def wtable(wrows):
    cell = widgets.VBox(wrows)  # let width and height pack themselves according to content
    return cell


# fin fonction

def get_data_status(dataset, expected_cols, test_courses_links=False):
    status = "OK"
    if len(set(dataset.columns) ^ set(expected_cols)) > 0:
        status = "broken"
    elif (len(dataset) == 0):
        status = "empty"
    elif test_courses_links:
        missing, duplicates = ocd.count_dirty_courses_links()
        if (missing + duplicates > 0):
            return "dirty"  # +str(missing)+" unresolved links "+str(duplicates)+" duplicates"
    return status


# fin fonction

def get_data_status_color(dataset, expected_cols, test_courses_links=False):
    color = "#161"
    if len(set(dataset.columns) ^ set(expected_cols)) > 0:
        color = "#636"
    elif (len(dataset) == 0):
        color = "#666"
    elif test_courses_links:
        missing, duplicates = ocd.count_dirty_courses_links()
        if (missing + duplicates > 0):
            return "#936"
    return color


# fin fonction

def display_data_status():
    # from OCCoursesDatasets import  OC_Topics , OC_Paths, OC_PathsSkills, OC_Projects, OC_ProjectsSkills, OC_Courses, OC_CoursesSkills, \
    #         OC_CoursesParts, OC_CoursesChapters, OC_ProjectsCoursesLinks,OC_CoursesLinks, OC_MyCourses
    #     global OC_Topics , OC_Paths, OC_PathsSkills, OC_Projects, OC_ProjectsSkills, OC_Courses, OC_CoursesSkills, \
    #             OC_CoursesParts, OC_CoursesChapters, OC_ProjectsCoursesLinks,OC_CoursesLinks, OC_MyCourses

    clear_status()
    set_status(str(len(ocd.OC_Topics)) + " topics")
    set_status(str(len(ocd.OC_Courses)) + " courses")
    set_status(str(len(ocd.OC_CoursesSkills)) + " courses skills")
    set_status(str(len(ocd.OC_CoursesParts)) + " courses parts")
    set_status(str(len(ocd.OC_CoursesChapters)) + " courses chapters")
    set_status(str(len(ocd.OC_CoursesLinks)) + " courses links")
    set_status(str(len(ocd.OC_Paths)) + " paths")
    set_status(str(len(ocd.OC_PathsSkills)) + " paths skills")
    set_status(str(len(ocd.OC_Projects)) + " projects")
    set_status(str(len(ocd.OC_ProjectsSkills)) + " projects skills")
    set_status(str(len(ocd.OC_ProjectsCoursesLinks)) + " projects courses links")
    set_status(str(len(ocd.OC_MyCourses)) + " 'My Courses'")


# fin fonction

# create some button vars to make them global
scrap_OC_Topics_button = None
scrap_OC_Courses_button = None
scrap_OC_CoursesDetails_button = None
scrap_OC_CoursesLinks_button = None
scrap_OC_RepairCoursesLinks_button = None
scrap_OC_Paths_button = None
scrap_OC_PathsSkills_button = None
scrap_OC_Projects_button = None
scrap_OC_ProjectsCoursesLinks_button = None
scrap_OC_MyCourses_button = None


def toggle_scrap_buttons(disable=True):
    global scrap_OC_Topics_button, scrap_OC_Courses_button, scrap_OC_CoursesDetails_button, scrap_OC_CoursesLinks_button, \
        scrap_OC_Paths_button, scrap_OC_PathsSkills_button, scrap_OC_Projects_button, scrap_OC_ProjectsCoursesLinks_button, \
        scrap_OC_MyCourses_button, scrap_OC_RepairCoursesLinks_button

    buttons = [scrap_OC_Topics_button, scrap_OC_Courses_button, scrap_OC_CoursesDetails_button,
               scrap_OC_CoursesLinks_button, \
               scrap_OC_Paths_button, scrap_OC_PathsSkills_button, scrap_OC_Projects_button,
               scrap_OC_ProjectsCoursesLinks_button, \
               scrap_OC_MyCourses_button, scrap_OC_RepairCoursesLinks_button]
    #     print("dis/en/abling scrap buttons -->"+str(disable))
    #     print(buttons)
    for sb in buttons:
        if (sb is None):
            continue
        else:
            #             print(sb)
            sb.disabled = disable
        # end if
    # end for


# fin fonction

# --- Data section GUI
def display_data_section():
    # from OCCoursesDatasets import OC_Topics , OC_Paths, OC_PathsSkills, OC_Projects, OC_ProjectsSkills, OC_Courses, OC_CoursesSkills, \
    #         OC_CoursesParts, OC_CoursesChapters, OC_ProjectsCoursesLinks,OC_CoursesLinks, OC_MyCourses, \
    #         OC_Topics_cols , OC_Paths_cols, OC_PathsSkills_cols, OC_Projects_cols, OC_ProjectsSkills_cols, OC_Courses_cols, OC_CoursesSkills_cols, \
    #         OC_CoursesParts_cols, OC_CoursesChapters_cols, OC_ProjectsCoursesLinks_cols,OC_CoursesLinks_cols, OC_MyCourses_cols

    global data_OC_out, scrap_OC_Topics_button, scrap_OC_Courses_button, scrap_OC_CoursesDetails_button, scrap_OC_CoursesLinks_button, \
        scrap_OC_Paths_button, scrap_OC_PathsSkills_button, scrap_OC_Projects_button, scrap_OC_ProjectsCoursesLinks_button, \
        scrap_OC_MyCourses_button, scrap_OC_RepairCoursesLinks_button

    wo_topics = None
    wo_courses = None
    wo_courses_details = None
    wo_paths = None
    wo_projects = None
    wo_my_courses = None

    data_OC_out.clear_output()
    with data_OC_out:

        # --- main table ---
        rows = []
        # --- head
        cells = []
        cells.append(
            wheadcell("<font color='#7451eb' size='4'>OpenClassrooms Courses</font>", width='250px', border='none'))
        cells.append(wheadcell("ENTRIES", width='100px'))
        cells.append(wheadcell("STATUS", width='80px'))
        cells.append(wheadcell("ACTION", width='220px'))
        t = "<span style='font-size:9px;'>Estimated Time</span>"
        cells.append(wheadcell(t, width='80px'))
        rows.append(wrow(cells))
        # --- end head

        # --- TOPICS
        cells = []
        cells.append(wheadcell("TOPICS", width='222px', icon=OCGraphsIconsLocal["topic"]))
        color = get_data_status_color(ocd.OC_Topics, ocd.OC_Topics_cols)
        cells.append(wcell(str(len(ocd.OC_Topics)), width='100px', color=color))
        cells.append(wcell(get_data_status(ocd.OC_Topics, ocd.OC_Topics_cols), width='80px', color=color))
        scrap_OC_Topics_button = widgets.Button(description="Collect !", icon="cube")
        scrap_OC_Topics_button.layout = widgets.Layout(width='220px', height='30px')
        scrap_OC_Topics_button.on_click(scrap_OC_Topics)
        cells.append(scrap_OC_Topics_button)
        cells.append(wcell("1min", width='80px'))
        rows.append(wrow(cells))
        # --- end TOPICS

        rows.append(wseparatorrow(5))

        # --- COURSES
        cells = []
        cells.append(wheadcell("COURSES", width='222px', icon=OCGraphsIconsLocal["course"]))
        color = get_data_status_color(ocd.OC_Courses, ocd.OC_Courses_cols)
        cells.append(wcell(str(len(ocd.OC_Courses)), width='100px', color=color))
        cells.append(wcell(get_data_status(ocd.OC_Courses, ocd.OC_Courses_cols), width='80px', color=color))
        if (len(ocd.OC_Topics) == 0):
            t = "<i>waiting for Topics</i>"
            cells.append(wcell(t, width='220px'))
        else:
            scrap_OC_Courses_button = widgets.Button(description="Collect !", icon="cube")
            scrap_OC_Courses_button.layout = widgets.Layout(width='220px', height='30px')
            scrap_OC_Courses_button.on_click(scrap_OC_Courses)
            cells.append(scrap_OC_Courses_button)
        cells.append(wcell("15min", width='80px'))
        rows.append(wrow(cells))

        cells = []
        cells.append(wheadcell("COURSES SKILLS", width='222px', icon=OCGraphsIconsLocal["skill"]))
        color = get_data_status_color(ocd.OC_CoursesSkills, ocd.OC_CoursesSkills_cols)
        cells.append(wcell(str(len(ocd.OC_CoursesSkills)), width='100px', color=color))
        cells.append(wcell(get_data_status(ocd.OC_CoursesSkills, ocd.OC_CoursesSkills_cols), width='80px', color=color))
        # here comes a button to import several dataframes at once : courses skills, courses parts and chapters...
        if (len(ocd.OC_Courses) == 0):
            t = "<i>waiting for Courses</i>"
            cells.append(wcell(t, width='220px'))
        else:
            scrap_OC_CoursesDetails_button = widgets.Button(description="Collect !", icon="cubes")
            scrap_OC_CoursesDetails_button.layout = widgets.Layout(width='220px', height='30px')
            scrap_OC_CoursesDetails_button.on_click(scrap_OC_CoursesDetails)
            cells.append(scrap_OC_CoursesDetails_button)
        cells.append(wcell("45min", width='80px'))
        rows.append(wrow(cells))

        cells = []
        cells.append(wheadcell("COURSES PARTS", width='222px', icon=OCGraphsIconsLocal["part"]))
        color = get_data_status_color(ocd.OC_CoursesParts, ocd.OC_CoursesParts_cols)
        cells.append(wcell(str(len(ocd.OC_CoursesParts)), width='100px', color=color))
        cells.append(wcell(get_data_status(ocd.OC_CoursesParts, ocd.OC_CoursesParts_cols), width='80px', color=color))
        cells.append(wleftbordercell("<i>(See above)</i>", width='220px', borderleft='20px solid #EEE'))
        cells.append(wemptycell(width='80px'))
        rows.append(wrow(cells))

        cells = []
        cells.append(wheadcell("COURSES CHAPTERS", width='222px', icon=OCGraphsIconsLocal["chapter"]))
        color = get_data_status_color(ocd.OC_CoursesChapters, ocd.OC_CoursesChapters_cols)
        cells.append(wcell(str(len(ocd.OC_CoursesChapters)), width='100px', color=color))
        cells.append(
            wcell(get_data_status(ocd.OC_CoursesChapters, ocd.OC_CoursesChapters_cols), width='80px', color=color))
        cells.append(wleftbordercell("<i>(See above)</i>", width='220px', borderleft='20px solid #EEE'))
        cells.append(wemptycell(width='80px'))
        rows.append(wrow(cells))

        cells = []
        cells.append(wheadcell("COURSES LINKS", width='222px', icon=OCGraphsIconsLocal["course_link"]))
        color = get_data_status_color(ocd.OC_CoursesLinks, ocd.OC_CoursesLinks_cols, test_courses_links=True)
        cells.append(wcell(str(len(ocd.OC_CoursesLinks)), width='100px', color=color))
        cells.append(
            wcell(get_data_status(ocd.OC_CoursesLinks, ocd.OC_CoursesLinks_cols, test_courses_links=True), width='80px',
                  color=color))
        if (len(ocd.OC_Courses) == 0) or (len(ocd.OC_CoursesChapters) == 0):
            t = "<i>waiting for Courses and Chapters</i>"
            cells.append(wcell(t, width='220px'))
        else:
            scrap_OC_CoursesLinks_button = widgets.Button(description="Collect !", icon="cube")
            scrap_OC_CoursesLinks_button.layout = widgets.Layout(width='220px', height='30px')
            scrap_OC_CoursesLinks_button.on_click(scrap_OC_CoursesLinks)
            cells.append(scrap_OC_CoursesLinks_button)
        cells.append(wcell("6 h !", width='80px', color='#D33'))
        rows.append(wrow(cells))

        missing_cl, duplicates_cl = ocd.count_dirty_courses_links()
        if (missing_cl + duplicates_cl > 0):
            cells = []
            cells.append(wemptycell(width='250px'))
            cells.append(wemptycell(width='100px'))
            cells.append(wemptycell(width='80px'))
            scrap_OC_RepairCoursesLinks_button = widgets.Button(
                description="Repair " + str(missing_cl + duplicates_cl) + " links!",
                icon="medkit",
                title=str(missing_cl) + " links are missing and " + str(duplicates_cl) + " are duplicated")
            scrap_OC_RepairCoursesLinks_button.layout = widgets.Layout(width='220px', height='30px')
            scrap_OC_RepairCoursesLinks_button.on_click(scrap_OC_RepairCoursesLinks)
            cells.append(scrap_OC_RepairCoursesLinks_button)
            est_time = int((missing_cl * 5) / 60) + 1
            cells.append(wcell(str(est_time) + "m", width='80px'))
            rows.append(wrow(cells))

            # --- END COURSES

        rows.append(wseparatorrow(5))

        # --- PATHS
        cells = []
        cells.append(wheadcell("PATHS", width='222px', icon=OCGraphsIconsLocal["path"]))
        color = get_data_status_color(ocd.OC_Paths, ocd.OC_Paths_cols)
        cells.append(wcell(str(len(ocd.OC_Paths)), width='100px', color=color))
        cells.append(wcell(get_data_status(ocd.OC_Paths, ocd.OC_Paths_cols), width='80px', color=color))
        if (len(ocd.OC_Topics) == 0):
            t = "<i>waiting for Topics</i>"
            cells.append(wcell(t, width='220px'))
        else:
            scrap_OC_Paths_button = widgets.Button(description="Collect !", icon="cube")
            scrap_OC_Paths_button.layout = widgets.Layout(width='220px', height='30px')
            scrap_OC_Paths_button.on_click(scrap_OC_Paths)
            cells.append(scrap_OC_Paths_button)
        cells.append(wcell("10m", width='80px'))
        rows.append(wrow(cells))

        cells = []
        cells.append(wheadcell("PATHS SKILLS", width='222px', icon=OCGraphsIconsLocal["skill"]))
        color = get_data_status_color(ocd.OC_PathsSkills, ocd.OC_PathsSkills_cols)
        cells.append(wcell(str(len(ocd.OC_PathsSkills)), width='100px', color=color))
        cells.append(wcell(get_data_status(ocd.OC_PathsSkills, ocd.OC_PathsSkills_cols), width='80px', color=color))
        if (len(ocd.OC_Paths) == 0):
            t = "<i>waiting for Paths</i>"
            cells.append(wcell(t, width='220px'))
        else:
            scrap_OC_PathsSkills_button = widgets.Button(description="Collect !", icon="cubes")
            scrap_OC_PathsSkills_button.layout = widgets.Layout(width='220px', height='30px')
            scrap_OC_PathsSkills_button.on_click(scrap_OC_PathsSkills)
            cells.append(scrap_OC_PathsSkills_button)
        cells.append(wcell("15m", width='80px'))
        rows.append(wrow(cells))
        # --- END PATHS

        rows.append(wseparatorrow(5))

        # --- PROJECTS
        cells = []
        cells.append(wheadcell("PROJECTS", width='222px', icon=OCGraphsIconsLocal["project"]))
        color = get_data_status_color(ocd.OC_Projects, ocd.OC_Projects_cols)
        cells.append(wcell(str(len(ocd.OC_Projects)), width='100px', color=color))
        cells.append(wcell(get_data_status(ocd.OC_Projects, ocd.OC_Projects_cols), width='80px', color=color))
        if (len(ocd.OC_Paths) == 0):
            t = "<i>waiting for Paths</i>"
            cells.append(wcell(t, width='220px'))
        else:
            scrap_OC_Projects_button = widgets.Button(description="Collect !", icon="cubes")
            scrap_OC_Projects_button.layout = widgets.Layout(width='220px', height='30px')
            scrap_OC_Projects_button.on_click(scrap_OC_Projects)
            cells.append(scrap_OC_Projects_button)
        cells.append(wcell("10m", width='80px'))
        rows.append(wrow(cells))

        cells = []
        cells.append(wheadcell("PROJECTS SKILLS", width='222px', icon=OCGraphsIconsLocal["skill"]))
        color = get_data_status_color(ocd.OC_ProjectsSkills, ocd.OC_ProjectsSkills_cols)
        cells.append(wcell(str(len(ocd.OC_ProjectsSkills)), width='100px', color=color))
        cells.append(
            wcell(get_data_status(ocd.OC_ProjectsSkills, ocd.OC_ProjectsSkills_cols), width='80px', color=color))
        cells.append(wleftbordercell("<i>(See above)</i>", width='220px', borderleft='20px solid #EEE'))
        cells.append(wemptycell(width='80px'))
        rows.append(wrow(cells))

        cells = []
        cells.append(wheadcell("PROJECTS-COURSES LINKS", width='222px', icon=OCGraphsIconsLocal["project_link"]))
        color = get_data_status_color(ocd.OC_ProjectsCoursesLinks, ocd.OC_ProjectsCoursesLinks_cols)
        cells.append(wcell(str(len(ocd.OC_ProjectsCoursesLinks)), width='100px', color=color))
        cells.append(wcell(get_data_status(ocd.OC_ProjectsCoursesLinks, ocd.OC_ProjectsCoursesLinks_cols), width='80px',
                           color=color))
        if (len(ocd.OC_Projects) == 0) or (len(ocd.OC_Courses) == 0):
            t = "<i>waiting for Projects and Courses</i>"
            cells.append(wcell(t, width='220px'))
        else:
            if (OC_browser_get_connexion_status() == False):
                t = "<i>connexion required</i>"
                cells.append(wcell(t, width='220px'))
            else:
                scrap_OC_ProjectsCoursesLinks_button = widgets.Button(description="Collect !", icon="cube")
                scrap_OC_ProjectsCoursesLinks_button.layout = widgets.Layout(width='220px', height='30px')
                scrap_OC_ProjectsCoursesLinks_button.on_click(scrap_OC_ProjectsCoursesLinks)
                cells.append(scrap_OC_ProjectsCoursesLinks_button)

        cells.append(wcell("10min", width='80px'))
        rows.append(wrow(cells))
        # --- END PROJECTS

        rows.append(wseparatorrow(5))

        # --- MY COURSES
        cells = []
        cells.append(wheadcell("MY COURSES", width='222px', icon=OCGraphsIconsLocal["course_success"]))
        color = get_data_status_color(ocd.OC_MyCourses, ocd.OC_MyCourses_cols)
        cells.append(wcell(str(len(ocd.OC_MyCourses)), width='100px', color=color))
        cells.append(wcell(get_data_status(ocd.OC_MyCourses, ocd.OC_MyCourses_cols), width='80px', color=color))
        if (len(ocd.OC_Courses) == 0):
            t = "<i>waiting for Courses</i>"
            cells.append(wcell(t, width='220px'))
        else:
            if (OC_browser_get_connexion_status() == False):
                t = "<i>connexion required</i>"
                cells.append(wcell(t, width='220px'))
            else:
                scrap_OC_MyCourses_button = widgets.Button(description="Collect !", icon="cubes")
                scrap_OC_MyCourses_button.layout = widgets.Layout(width='220px', height='30px')
                scrap_OC_MyCourses_button.on_click(scrap_OC_MyCourses)
                cells.append(scrap_OC_MyCourses_button)

        cells.append(wcell("2min", width='80px'))
        rows.append(wrow(cells))
        # --- END MY COURSES

        # --- end rows
        #         display(wtable(rows))
        main_table = wtable(rows)
        # --- end main table ---

        # --- bottom table ---
        rows = []
        cells = []
        cells.append(wheadcell("<font color='#7451eb' size='3'>--> Write OpenClassrooms Courses to CSV --> </font>",
                               width='440px', border='none'))
        save_OC_datasets_button = widgets.Button(description="Save Database to CSV !", icon="save")
        save_OC_datasets_button.layout = widgets.Layout(width='220px', height='30px')
        save_OC_datasets_button.on_click(save_OC_datasets_action)
        cells.append(save_OC_datasets_button)
        rows.append(wrow(cells))
        #         display(wtable(rows))
        bottom_table = wtable(rows)
        # --- end bottom table ---

        # --- plots table ---
        rows = []

        # --- head
        cells = []
        #         cells.append(wemptycell(width='400px'))
        cells.append(wheadcell("<font color='#7451eb' size='4'>&nbsp;</font>", width='400px', border='none'))
        rows.append(wrow(cells))
        # --- end head

        # --- TOPICS
        cells = []
        if (len(ocd.OC_Topics) == 0):
            cells.append(wemptycell(width='400px'))
        else:
            wo_topics = woutcell(width='400px')
            cells.append(wo_topics)
        rows.append(wrow(cells))
        # --- end TOPICS

        rows.append(wseparatorrow(1))

        # --- COURSES
        cells = []
        if (len(ocd.OC_Topics) == 0) or (len(ocd.OC_Courses) == 0):
            cells.append(wemptycell(width='400px'))
        else:
            wo_courses = woutcell(width='400px')
            cells.append(wo_courses)
        rows.append(wrow(cells))

        cells = []
        if (len(ocd.OC_Topics) == 0) or (len(ocd.OC_Courses) == 0):
            cells.append(wemptycell(width='400px'))
        else:
            wo_courses_details = woutcell(width='400px', height='96%')
            cells.append(wo_courses_details)
        rows.append(wrow(cells, height=str(35 * 4) + "px"))

        # missing_cl,duplicates_cl calculated while building main table / = ocd.count_dirty_courses_links()
        if (missing_cl + duplicates_cl > 0):
            cells = []
            cells.append(wemptycell(width='400px'))
            rows.append(wrow(cells))
            # --- END COURSES

        rows.append(wseparatorrow(1))

        # --- PATHS
        cells = []
        if (len(ocd.OC_Topics) == 0) or (len(ocd.OC_Paths) == 0):
            cells.append(wemptycell(width='400px'))
        else:
            wo_paths = woutcell(width='400px', height='92%')
            cells.append(wo_paths)
        rows.append(wrow(cells, height=str(35 * 2) + "px"))
        # --- END PATHS

        rows.append(wseparatorrow(1))

        # --- PROJECTS
        cells = []
        if (len(ocd.OC_Topics) == 0) or (len(ocd.OC_Paths) == 0) or (len(ocd.OC_Projects) == 0):
            cells.append(wemptycell(width='400px'))
        else:
            wo_projects = woutcell(width='400px', height='96%')
            cells.append(wo_projects)
        rows.append(wrow(cells, height=str(35 * 3) + "px"))
        # --- END PROJECTS

        rows.append(wseparatorrow(1))

        # --- MY COURSES
        cells = []
        if (len(ocd.OC_Topics) == 0) or (len(ocd.OC_MyCourses) == 0) or (len(ocd.OC_MyProgressCourses) == 0):
            cells.append(wemptycell(width='400px'))
        else:
            wo_my_courses = woutcell(width='400px')
            cells.append(wo_my_courses)
        rows.append(wrow(cells))
        # --- END MY COURSES

        # --- end rows
        #         display(wtable(rows))
        plots_table = wtable(rows)
        # --- end plots table ---

        # --- full data table ---
        rows = []
        cells = []
        cells.append(plots_table)
        cells.append(main_table)
        rows.append(wrow(cells, height="500px"))
        cells = []
        cells.append(wemptycell(width="400px"))
        cells.append(bottom_table)
        rows.append(wrow(cells, height="60px"))
        display(wtable(rows))
        # --- end full data table ---
    # end displaying on data output
    # now that the outputs are displayed, show the plots 
    if (type(wo_topics) != type(None)):
        with wo_topics:
            ocp.draw_micro_topics_plot()
    if (type(wo_courses) != type(None)):
        with wo_courses:
            ocp.draw_micro_courses_plot()
    if (type(wo_courses_details) != type(None)):
        with wo_courses_details:
            ocp.draw_micro_courses_details_plot()
    if (type(wo_paths) != type(None)):
        with wo_paths:
            ocp.draw_micro_paths_plot()
    if (type(wo_projects) != type(None)):
        with wo_projects:
            ocp.draw_micro_projects_plot()
    if (type(wo_my_courses) != type(None)):
        with wo_my_courses:
            ocp.draw_micro_mycourses_plot()


# end function

# fin fonction    


# --------------------------------------- DISPLAY GUI
def display_GUI(load_datasets=True):
    global header_box, menu_tab, data_OC_out, paths_out, projects_out, courses_out
    # -------------- Affichage header
    display(header_box)
    clear_console_log()
    console_log("Application up and running.", False)
    clear_status()
    clear_progress()
    set_status("Ready to load datasets!")
    init_progress()

    # -------------- Affichage interface principale
    display(menu_tab)

    if (load_datasets):
        # --- Dataset first load
        ocd.load_OC_datasets()

    #     clear_output(wait=True)
    # --- as the "data" tab is the first to appear, show some data and interaction
    display_connexion_info()
    display_data_status()
    display_data_section()
    populate_paths_selectors()
    display_path_section()
    populate_projects_selectors()
    display_projects_section()
    populate_courses_selectors()
    #     display_courses_section() # not shown on application startup to avoid JS freezing display. The section will be activated by the user
    populate_schedule_selectors()
    display_schedule_section()
    display_information_section()
# fin fonction
