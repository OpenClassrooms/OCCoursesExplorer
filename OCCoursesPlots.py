# -*- coding: utf-8 -*-
# OPENCLASSROOMS-COURSES-EXPLORER 
# Copyright (c) 2021, Tristan Vanrullen - all rights reserved.
# Note there is a licence for the code and another for the contents generated by the application
# see licence.txt for more details 

 
from OCCoursesConfig import pd, plt,sns, display,math
import OCCoursesDatasets as ocd
import matplotlib

def get_lighter_color(hexcol,percent):
    rgb = matplotlib.colors.ColorConverter.to_rgb(hexcol)
#     print(rgb,hexcol,percent)
    hexcolor="#"+"".join('%02x' %min(int(x*255+((255-x*255)*percent/100)),255) for x in rgb)
    return hexcolor
#end function



def draw_micro_topics_plot():
    dt=ocd.OC_Topics.sort_values(by="topic_name")
    dt["topic_uid"]=dt.agg(lambda x: f"{x['topic_name'][:3]}", axis=1)
    dt=dt.sort_values(by="topic_name")
    
    sns.set(font_scale =3)
    p= sns.catplot(x="topic_uid", kind="count", data=dt,legend=False, \
                   palette=sns.color_palette(dt.topic_color.values),height=2.1,aspect=6.5)
    sns.despine() 
    p.set(yticklabels=[])  
    p.set(title=None)
    p.set(xlabel=None)
    p.set(ylabel=None)
    plt.show()
    sns.set(font_scale =1)
    #display("df")
# end function

def draw_micro_courses_plot():
    dt=ocd.OC_Topics.sort_values(by="topic_name")
    dt["topic_uid"]=dt.agg(lambda x: f"{x['topic_name'][:3]}", axis=1)
    dt=dt.sort_values(by="topic_name")
    df=dt.merge(ocd.OC_Courses, on='topic_id', how='left')
    p= sns.catplot(x="topic_uid", kind="count", data=df,legend=False, \
                   palette=sns.color_palette(dt.topic_color.values),height=4,aspect=len(dt))
    sns.despine() 
    plt.yscale('log')
    plt.axis('off')
    p.set(xticklabels=[])  
    p.set(yticklabels=[])  
    p.set(title=None)
    p.set(xlabel=None)
    p.set(ylabel=None)
    plt.show()
# end function

def draw_micro_courses_details_plot():
    dt=ocd.OC_Topics.sort_values(by="topic_name")
    dt["topic_uid"]=dt.agg(lambda x: f"{x['topic_name'][:3]}", axis=1)
    dt=dt.sort_values(by="topic_name")

    df=dt.merge(ocd.OC_Courses, on='topic_id', how='left')
    df["src_topic_id"]=df["topic_id"]
    df["src_topic_uid"]=df["topic_uid"]
    df=df[["src_topic_id","src_topic_uid","course_id"]]

    df=df.merge(ocd.OC_CoursesLinks, left_on='course_id', right_on='src_course_id', how='left')
    df=df[["src_topic_id","src_topic_uid","src_course_id","src_chapter_id","tgt_course_id","tgt_chapter_id"]]
    df=df.merge(ocd.OC_Courses, left_on='tgt_course_id', right_on='course_id', how='left')
    df["tgt_topic_id"]=df["topic_id"]
    df=df[["src_topic_id","src_topic_uid","src_course_id","src_chapter_id",'tgt_topic_id',"tgt_course_id","tgt_chapter_id"]]
    df=df.merge(dt, left_on='tgt_topic_id', right_on='topic_id', how='left')
    df["tgt_topic_uid"]=df["topic_uid"]

    df=df[["src_topic_id","src_topic_uid","src_course_id","src_chapter_id",'tgt_topic_id','tgt_topic_uid',"tgt_course_id","tgt_chapter_id"]].dropna()

    
    ddf=df[['src_topic_uid','tgt_topic_uid']].copy()
    ddf["n"]=1
    ddf=ddf.groupby(['src_topic_uid','tgt_topic_uid']).count()  #['src_count'].agg(['count'])
    ddf=ddf.reset_index()
    ddf["n"]=pd.to_numeric(ddf["n"])
    ddf["ln"]=ddf["n"].apply(math.log)

    dims = (8, 2.6)
    fig, ax = plt.subplots(figsize=dims)
    q= sns.scatterplot(ax=ax,x="src_topic_uid",y="tgt_topic_uid",hue="tgt_topic_uid", size="ln", sizes=(10, 300),data=ddf,legend=False, \
                   palette=sns.color_palette(dt.topic_color.values))
    sns.despine()  
    sns.set_style("white")
    plt.axis('off')
    q.set(xticklabels=[])  
    q.set(yticklabels=[])  
    q.set(title=None)
    q.set(xlabel=None)
    q.set(ylabel=None)
    plt.show()     
    
# end function


def draw_micro_paths_plot():
    dt=ocd.OC_Topics.sort_values(by="topic_name")
    dt["topic_uid"]=dt.agg(lambda x: f"{x['topic_name'][:3]}", axis=1)
    dt=dt.sort_values(by="topic_name")
    df=dt.merge(ocd.OC_Paths, on='topic_id', how='left')
    p= sns.catplot(x="topic_uid", kind="count", data=df,legend=False, \
                   palette=sns.color_palette(dt.topic_color.values),height=3,aspect=6.3)
    sns.despine() 
#     plt.yscale('log')
    plt.axis('off')
    p.set(xticklabels=[])  
    p.set(yticklabels=[])  
    p.set(title=None)
    p.set(xlabel=None)
    p.set(ylabel=None)
    plt.show()
# end function

def draw_micro_projects_plot():
    dt=ocd.OC_Topics.sort_values(by="topic_name")
    dt["topic_uid"]=dt.agg(lambda x: f"{x['topic_name'][:3]}", axis=1)
    dt=dt.sort_values(by="topic_name")
    df=dt.merge(ocd.OC_Paths, on='topic_id', how='left')
    df=df.merge(ocd.OC_Projects, on='path_id', how='left')
    p= sns.catplot(x="topic_uid", kind="count", data=df,legend=False, \
                   palette=sns.color_palette(dt.topic_color.values),height=5,aspect=3.8)
    sns.despine() 
#     plt.yscale('log')
    plt.axis('off')
    p.set(xticklabels=[])  
    p.set(yticklabels=[])  
    p.set(title=None)
    p.set(xlabel=None)
    p.set(ylabel=None)
    plt.show() 
# end function

def draw_micro_mycourses_plot(dims = (6.6,0.38)):
    dt=ocd.OC_Topics.sort_values(by="topic_name")
    dt["topic_uid"]=dt.agg(lambda x: f"{x['topic_name'][:3]}", axis=1)
    dt=dt.sort_values(by="topic_name")


    df=ocd.OC_MyProgressCourses.merge(ocd.OC_Courses, on='course_id', how='left')
    df=df[["topic_id","course_id","progression"]]
    df = df.groupby(['topic_id']) \
       .agg({'course_id':'size','progression':'mean'}) \
       .rename(columns={'course_id':'count','progression':'mean_progression'}) \
       .reset_index()

    df=dt.merge(df, on='topic_id', how='left')
    df=df.fillna(0)
    # df["status"]=df["progression"].apply(ocd.get_status_for_progression)
    df=df[["topic_id","topic_uid","topic_color","count","mean_progression"]]
    df["count_progression"]=df["mean_progression"]*df["count"]/100
    df["topic_lighter_color"]=df.agg(lambda x: f"{get_lighter_color(x['topic_color'],70)}", axis=1)
    # .apply(get_lighter_color)

#     dims = (6, 0.6)
    fig, ax = plt.subplots(figsize=dims)
    ax.bar(df["topic_uid"], df["count"],color=df["topic_lighter_color"])
    ax.bar(df["topic_uid"], df["count_progression"],color=df["topic_color"])
 
    plt.axis('off')
    plt.show() 

    
# end function    