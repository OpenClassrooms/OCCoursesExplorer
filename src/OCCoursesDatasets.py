# -*- coding: utf-8 -*-
# OPENCLASSROOMS-COURSES-EXPLORER 
# Copyright (c) 2021, Tristan Vanrullen - all rights reserved.
# Note there is a licence for the code and another for the contents generated by the application
# see licence.txt for more details 


from OCCoursesConfig import pd, Path  # get readonly access to all config vars + 3d party libraries
import OCCoursesConfig as occ

# --------------------------------------- OC DATASETS
# Entity-Relation Model
# --------------------------------------- hierarchical structure of topics, paths and projects
# Topic 1>contains_path>N Path 1>contains_project>N Project 
OC_Topics_cols = ["topic_id", "topic_name", "topic_html_name", "topic_color"]
OC_Topics = pd.DataFrame(columns=OC_Topics_cols)

OC_Paths_cols = ["topic_id", "path_id", "path_name", "path_date", "path_title", "path_description", "path_language",
                 "path_level", "path_duration_months", "path_employment_warranty", "path_partner", "path_illustration", "path_url", "path_certification_url"]
OC_Paths = pd.DataFrame(columns=OC_Paths_cols)

# when connected to OC (with login), AND when the user subscribes a given path, ONLY the projects of this path have a visible project ID
# otherwise (logged in or not), projects of paths are only identified by path id and rank number
# so for most of our dataset stuff, we will have to deal with (path_id,project_number) to identify projects
OC_Projects_cols = ["path_id", "project_id", "project_number", "project_name", "project_title", "project_description",
                    "project_duration_hours", "project_illustration", "project_url"]
OC_Projects = pd.DataFrame(columns=OC_Projects_cols)
# --------------------------------------- hierarchical structure of topics and courses
# Courses always belong to a given topic
# Topic 1>contains_course>N Course 
# we count activities and exercises in this dataset; the chapters count will be retrieved by counting entries in the Chapters dataset.
OC_Courses_cols = ["topic_id", "course_id", "course_name", "course_date", "course_title", "course_description",
                   "course_language", "course_difficulty", "course_duration_hours", "course_author", "course_partner", "course_illustration",
                   "course_is_certified", "course_url", "course_activities_count", "course_exercises_count"]
OC_Courses = pd.DataFrame(columns=OC_Courses_cols)
# --------------------------------------- hierarchical structure of courses, their parts and their chapters
# Course 1>contains_part>N Part 1>contains_chapter>N Chapter
OC_CoursesParts_cols = ["course_id", "part_number", "part_name", "part_title", "part_description", "part_url"]
OC_CoursesParts = pd.DataFrame(columns=OC_CoursesParts_cols)

OC_CoursesChapters_cols = ["course_id", "part_number", "chapter_id", "chapter_number", "chapter_name", "chapter_title",
                           "chapter_description", "chapter_url"]
OC_CoursesChapters = pd.DataFrame(columns=OC_CoursesChapters_cols)
# --------------------------------------- Relations between projects and courses 
# Courses may be prerequisites for several projects of several paths, but they can also exist "standalone"
# Project 0-N>requires_course>0-N Course 
OC_ProjectsCoursesLinks_cols = ["path_id", "project_id", "project_number", "course_id", "href"]
OC_ProjectsCoursesLinks = pd.DataFrame(columns=OC_ProjectsCoursesLinks_cols)
# --------------------------------------- Relations between courses and other courses 
# Courses may *require* other courses
# Course(+Chapter) 0-N>requires_course>N Course(+Chapter) 
# ---
# Courses chapters may also reference other courses chapters
# Course(+Chapter) 1>references>N Course(+Chapter)
# ---
# when course A "requires" (or simply "references") by course B, A is source and B is target
# chapter is not mandatory in the relationship, but sometimes used in the links between courses contents
# also note : 
# - a course can reference itself
# - unresolved links are kept for further resolution
OC_CoursesLinks_cols = ["src_course_id", "src_chapter_id", "relation", "tgt_course_id", "tgt_chapter_id", "href"]
OC_CoursesLinks = pd.DataFrame(columns=OC_CoursesLinks_cols)

# --------------------------------------- Paths, Projects and Courses provide Skills
OC_PathsSkills_cols = ["path_id", "skill"]
OC_PathsSkills = pd.DataFrame(columns=OC_PathsSkills_cols)

OC_ProjectsSkills_cols = ["path_id", "project_id", "project_number", "skill"]
OC_ProjectsSkills = pd.DataFrame(columns=OC_ProjectsSkills_cols)

OC_CoursesSkills_cols = ["course_id", "skill"]
OC_CoursesSkills = pd.DataFrame(columns=OC_CoursesSkills_cols)

# --------------------------------------- "My Courses" follow-up  
# - as described here : https://openclassrooms.com/fr/courses/4525281-realisez-une-analyse-exploratoire-de-donnees/5148885-telechargez-les-jeux-de-donnees-analyses-dans-ce-cours
# - and here for the original javascript scrapper + python source code : https://github.com/stenier-oc/realisez-une-analyse-de-donnees-exploratoire 
# The purpose of this dataset is to track one's progression and explore related variables
# In the present Python program, we use Selenium to connect OC user dashboard and parse pages
# We use the SAME COLUMNS NAMES (in French) as in the datasets and scripts provided by OC (see the github source code), allowing these scripts to work properly (ACP stats, bags of words...)
OC_MyCourses_cols = ["titreCours", "inscription", "progression", "moyenneDeClasse", "duree", "difficulte",
                     "nbChapitres", "ratioQuizEvaluation", "nbEvaluations", "derniereMiseAJour", "idCours"]
OC_MyCourses = pd.DataFrame(columns=OC_MyCourses_cols)
# Parallel to the progression analysis given in the OC course, we use internally 2 other datasets, to keep track of user progression in his courses and paths
OC_MyProgressCourses_cols = ["course_id", "start_date", "progression"]
OC_MyProgressCourses = pd.DataFrame(columns=OC_MyProgressCourses_cols)
OC_MyProgressProjects_cols = ["path_id", "project_number", "start_date", "status"]
OC_MyProgressProjects = pd.DataFrame(columns=OC_MyProgressProjects_cols)

# --------------------------------------- Some useful info
# get a numeric value "path_grade" instead of the textual "path_level"
# >>> display(pd.unique(dfp.path_level))
# >>> ['Certification OpenClassrooms', 'Licence (Bac+3)', 'Diplôme niveau 5 (Bac+2)', 'Diplôme niveau 6 (Bac+3/4)', 'Diplôme niveau 7 (Bac+5)', 'Master (Bac+5)']
path_grades = {'Certification OpenClassrooms': 1,
               'Diplôme niveau 5 (Bac+2)': 2,
               'Licence (Bac+3)': 3,
               'Diplôme niveau 6 (Bac+3/4)': 4,
               'Diplôme niveau 7 (Bac+5)': 5,
               'Master (Bac+5)': 5}

course_grades = {'Facile': 1,
                 'Moyenne': 2,
                 'Difficile': 3}


def get_status_for_progression(p):
    if p == 0:
        return 'todo'
    elif p == 100:
        return 'done'
    return 'in_progress'


# end func

# --------------------------------------- Dataset hosting


def load_dataset(filename, expected_columns, delimiter="\t"):
    from OCCoursesInterface import console_log
    fileObj = Path(occ.DatasetsFolder + filename)
    if not fileObj.is_file():
        console_log(
            "The file " + occ.DatasetsFolder + filename + " could not be loaded! It will be necessary to rebuild it.")
        return pd.DataFrame(columns=expected_columns)
    console_log("Loading " + occ.DatasetsFolder + filename + " ...")
    df = pd.read_csv(occ.DatasetsFolder + filename, delimiter=delimiter, low_memory=False)
    columns_OK = True
    for c in expected_columns:
        if not c in df.columns:
            columns_OK = False
            console_log("... The column '" + c + "' could not be found in the file!")
    if columns_OK == False:
        console_log(
            "Because of missing columns, the file " + occ.DatasetsFolder + filename + " is partially broken! It will be necessary to rebuild it.")
        if (len(df) == 0):
            return pd.DataFrame(columns=expected_columns)
        else:
            return df
    console_log("... OK : " + str(df.shape[0]) + " lines / " + str(df.shape[1]) + " columns.")
    return df


# fin fonction

def load_OC_datasets():
    global OC_Topics, OC_Paths, OC_PathsSkills, OC_Courses, OC_CoursesSkills, OC_CoursesParts, OC_CoursesChapters, OC_CoursesLinks, \
        OC_Projects, OC_ProjectsSkills, OC_ProjectsCoursesLinks, OC_MyCourses, OC_MyProgressCourses, OC_MyProgressProjects, \
        OC_Topics_cols, OC_Paths_cols, OC_PathsSkills_cols, OC_Courses_cols, OC_CoursesSkills_cols, OC_CoursesParts_cols, OC_CoursesChapters_cols, OC_CoursesLinks_cols, \
        OC_Projects_cols, OC_ProjectsSkills_cols, OC_ProjectsCoursesLinks_cols, OC_MyCourses_cols, OC_MyProgressCourses_cols, OC_MyProgressProjects_cols
    OC_Topics = load_dataset("topics.csv", OC_Topics_cols)
    OC_Courses = load_dataset("courses.csv", OC_Courses_cols)
    OC_CoursesSkills = load_dataset("courses_skills.csv", OC_CoursesSkills_cols)
    OC_CoursesParts = load_dataset("courses_parts.csv", OC_CoursesParts_cols)
    OC_CoursesChapters = load_dataset("courses_chapters.csv", OC_CoursesChapters_cols)
    OC_CoursesLinks = load_dataset("courses_links.csv", OC_CoursesLinks_cols)
    OC_Paths = load_dataset("paths.csv", OC_Paths_cols)
    OC_PathsSkills = load_dataset("paths_skills.csv", OC_PathsSkills_cols)
    OC_Projects = load_dataset("projects.csv", OC_Projects_cols)
    OC_ProjectsSkills = load_dataset("projects_skills.csv", OC_ProjectsSkills_cols)
    OC_ProjectsCoursesLinks = load_dataset("projects_courses_links.csv", OC_ProjectsCoursesLinks_cols)
    OC_MyCourses = load_dataset("my_courses.csv", OC_MyCourses_cols, ",")
    OC_MyProgressCourses = load_dataset("my_progress_courses.csv", OC_MyProgressCourses_cols)
    OC_MyProgressProjects = load_dataset("my_progress_projects.csv", OC_MyProgressProjects_cols)


# fin fonction

def save_OC_datasets():
    from OCCoursesInterface import console_log
    global OC_Topics, OC_Paths, OC_PathsSkills, OC_Projects, OC_ProjectsSkills, OC_Courses, OC_CoursesSkills, OC_CoursesParts, OC_CoursesChapters, OC_CoursesLinks, \
        OC_ProjectsCoursesLinks, OC_MyCourses, OC_MyProgressCourses, OC_MyProgressProjects
    console_log("Saving datasets to " + occ.DatasetsFolder + " ...")
    OC_Topics.to_csv(occ.DatasetsFolder + "topics.csv", index=False, sep="\t")
    OC_Paths.to_csv(occ.DatasetsFolder + "paths.csv", index=False, sep="\t")
    OC_PathsSkills.to_csv(occ.DatasetsFolder + "paths_skills.csv", index=False, sep="\t")
    OC_Projects.to_csv(occ.DatasetsFolder + "projects.csv", index=False, sep="\t")
    OC_ProjectsSkills.to_csv(occ.DatasetsFolder + "projects_skills.csv", index=False, sep="\t")
    OC_Courses.to_csv(occ.DatasetsFolder + "courses.csv", index=False, sep="\t")
    OC_CoursesSkills.to_csv(occ.DatasetsFolder + "courses_skills.csv", index=False, sep="\t")
    OC_CoursesParts.to_csv(occ.DatasetsFolder + "courses_parts.csv", index=False, sep="\t")
    OC_CoursesChapters.to_csv(occ.DatasetsFolder + "courses_chapters.csv", index=False, sep="\t")
    OC_CoursesLinks.to_csv(occ.DatasetsFolder + "courses_links.csv", index=False, sep="\t")
    OC_ProjectsCoursesLinks.to_csv(occ.DatasetsFolder + "projects_courses_links.csv", index=False, sep="\t")
    OC_MyCourses.to_csv(occ.DatasetsFolder + "my_courses.csv", index=False,
                        sep=",")  # note the ',' to remain fully compatible with the OC exercise
    OC_MyProgressCourses.to_csv(occ.DatasetsFolder + "my_progress_courses.csv", index=False, sep="\t")
    OC_MyProgressProjects.to_csv(occ.DatasetsFolder + "my_progress_projects.csv", index=False, sep="\t")
    console_log("... OK")


# fin fonction


# --------------------------------------- Some datasets util functions
def count_dirty_courses_links():
    missing = 0
    duplicates = 0
    # target courses ids value = 0
    df = OC_CoursesLinks[OC_CoursesLinks["tgt_course_id"].isin([0])]
    unique_hrefs = df["href"].unique()
    missing = len(unique_hrefs)
    #    print("unique values to be resolved : ",len(unique_hrefs))
    #     display(ocd.OC_CoursesLinks[ocd.OC_CoursesLinks["tgt_course_id"].isin([0])].head())

    # liens inter-cours en doublon (src_course + src_chapter + relation + href)
    dfd = OC_CoursesLinks[
        OC_CoursesLinks.duplicated(['src_course_id', 'src_chapter_id', "relation", "href"], keep=False)]
    duplicates = len(dfd)

    return missing, duplicates
# end function
